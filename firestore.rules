rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    // Admin check: user doc must have role == 'Admin'
    function isAdmin() {
      return isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Ratings: allow any signed-in user to read driver ratings
    match /ratings/{ratingId} {
      // Read ratings for any user (e.g., passengers viewing driver ratings)
      allow get, list: if isSignedIn();

      // Only the rater can create a rating; basic validations
      allow create: if isSignedIn()
        && request.resource.data.keys().hasAll(['ratedId','raterId','rating','comments'])
        && request.resource.data.raterId == request.auth.uid
        && request.resource.data.rating is number
        && request.resource.data.rating >= 1 && request.resource.data.rating <= 5;

      // Disallow updates/deletes to preserve integrity
      allow update, delete: if false;
    }

    // Users and drivers profile images: readable by signed-in users
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false; // prevent list over entire collection
      // Allow each user to create/update their own profile doc (for role assignment)
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
    }
    match /drivers/{driverId} {
      allow get: if isSignedIn();
      // Allow Admins to list drivers for dashboard management
      allow list: if isAdmin();
    }

    // Rides: rider, driver, or Admin can read; Admin can query list
    match /rides/{rideId} {
      // Read single ride if requester is rider, driver, or Admin
      allow get: if isSignedIn() && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.driverId ||
        isAdmin()
      );

      // List (collection queries) are Admin-only for dashboard status checks
      allow list: if isAdmin();

      // Writes (optional, align with app behavior)
      allow create, update: if isSignedIn() && (
        request.auth.uid == request.resource.data.userId ||
        request.auth.uid == request.resource.data.driverId ||
        isAdmin()
      );
      allow delete: if false;
    }

    // Public summaries (e.g., driver_rating_summaries_* docs)
    match /public/{docId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create, update, delete: if false;
    }

    // bookingRequests are managed by server/CF; restrict wide reads
    match /bookingRequests/{bookingId} {
      allow list: if false;
      allow create, update: if false; // via callable functions only
      allow delete: if false;
    }

    // Booking history: allow riders/drivers to read their own history; Admin can read all
    match /bookinghistory/{historyId} {
      allow get, list: if isSignedIn() && (
        isAdmin() ||
        resource.data.driverId == request.auth.uid ||
        resource.data.riderId == request.auth.uid
      );
    }

    // Reports: passengers can create, read their own; Admin can list/read all
    match /reports/{reportId} {
      // Read single report if requester is reporter, rider/driver on booking, or Admin
      allow get: if isSignedIn() && (
        isAdmin() ||
        resource.data.reporterId == request.auth.uid ||
        resource.data.riderId == request.auth.uid ||
        resource.data.driverId == request.auth.uid
      );

      // Collection queries: allow signed-in; per-doc get still restricts returned docs
      allow list: if isSignedIn();

      // Only the signed-in reporter can create a report with minimal validation
      allow create: if isSignedIn()
        && request.resource.data.keys().hasAll(['bookingId','reporterId','riderId','driverId','message','timestamp'])
        && request.resource.data.reporterId == request.auth.uid
        && request.resource.data.message is string
        && request.resource.data.message.size() > 0;

      // Allow Admin to mark reports as resolved with limited field updates
      allow update: if isAdmin()
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','resolvedAt','resolvedBy']);
      // Deleting reports is not allowed
      allow delete: if false;
    }
  }
}
